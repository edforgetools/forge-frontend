name: Frontend CI

on:
  push:
    branches: [ main, develop, feat/*, fix/*, chore/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20, 22]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9.15.9
        
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Type check
      run: pnpm typecheck
      
    - name: Lint
      run: pnpm lint
      
    - name: Build application
      run: pnpm build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-node-${{ matrix.node-version }}
        path: dist/
        retention-days: 7
        
    - name: Install Playwright browsers
      run: pnpm exec playwright install --with-deps
      
    - name: Run Playwright tests
      run: pnpm test:ci
      
    - name: Upload Playwright test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-results-node-${{ matrix.node-version }}
        path: |
          playwright-report/
          test-results/
        retention-days: 7
        
    - name: Start preview server for Lighthouse
      run: |
        pnpm preview &
        sleep 10
        echo "Preview server started"
        
    - name: Wait for preview server
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:5183 > /dev/null 2>&1; do sleep 1; done'
        
    - name: Run Lighthouse CI
      run: pnpm lighthouse
      
    - name: Upload Lighthouse results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lighthouse-results-node-${{ matrix.node-version }}
        path: |
          .lighthouseci/
          lighthouse-index.json
        retention-days: 7
        
    - name: Bundle size analysis
      run: pnpm size-limit
      
    - name: Upload bundle analysis
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bundle-analysis-node-${{ matrix.node-version }}
        path: |
          dist/bundle-analysis.html
        retention-days: 7

  lighthouse-performance:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 22
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9.15.9
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Build application
      run: pnpm build
      
    - name: Start preview server
      run: |
        pnpm preview &
        sleep 10
        
    - name: Wait for preview server
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:5183 > /dev/null 2>&1; do sleep 1; done'
        
    - name: Run Lighthouse CI with upload
      run: pnpm lighthouse
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        
    - name: Comment PR with Lighthouse results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read lighthouse results if available
          const lighthousePath = '.lighthouseci';
          if (fs.existsSync(lighthousePath)) {
            const files = fs.readdirSync(lighthousePath);
            const jsonFiles = files.filter(file => file.endsWith('.json'));
            
            if (jsonFiles.length > 0) {
              const results = JSON.parse(fs.readFileSync(path.join(lighthousePath, jsonFiles[0]), 'utf8'));
              
              const comment = `## ðŸš€ Lighthouse Performance Report
              
              **Performance Score:** ${Math.round(results.categories.performance.score * 100)}/100
              **Accessibility Score:** ${Math.round(results.categories.accessibility.score * 100)}/100
              **Best Practices Score:** ${Math.round(results.categories['best-practices'].score * 100)}/100
              **SEO Score:** ${Math.round(results.categories.seo.score * 100)}/100
              
              [View detailed report](${results.reportUrl || '#'})`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          }
