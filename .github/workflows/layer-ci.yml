name: Layer CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.18.1'

concurrency:
  group: layer-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Step 1: Build
  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm typecheck

      - name: Lint
        run: pnpm lint

      - name: Format check
        run: pnpm format:check

      - name: Build
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: layer-build-artifacts
          path: dist/
          retention-days: 7

  # Step 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests with coverage
        run: pnpm test:unit --coverage --run

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: layer-unit-test-results
          path: |
            coverage/
            test-results/
          retention-days: 30

  # Step 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

      - name: Run integration tests
        run: pnpm test --run
        env:
          NODE_ENV: test
          # Add integration test environment variables if needed
          # INTEGRATION_API_URL: ${{ secrets.INTEGRATION_API_URL }}

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: layer-integration-test-results
          path: |
            test-results/
            coverage/
          retention-days: 30

  # Step 4: Playwright E2E Tests
  playwright:
    name: Playwright Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            playwright-

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium

      - name: Build
        run: pnpm build

      - name: Start server and run Playwright tests
        run: |
          echo "Starting preview server..."
          npx vite preview --port 4173 --host 127.0.0.1 &
          SERVER_PID=$!
          echo "Server PID: $SERVER_PID"

          # Wait for server to start
          echo "Waiting for server to start..."
          for i in {1..30}; do
            if curl -f http://127.0.0.1:4173 > /dev/null 2>&1; then
              echo "Server is ready after $((i*2)) seconds!"
              break
            fi
            echo "Attempt $i: Server not ready yet, waiting..."
            sleep 2
            if [ $i -eq 30 ]; then
              echo "Server failed to start after 60 seconds"
              ps aux | grep preview || echo "No preview process found"
              exit 1
            fi
          done

          echo "Server health check passed!"
          echo "Running Layer-specific Playwright tests..."

          # Run layer-specific tests
          pnpm exec playwright test --project=chromium
          echo "Layer Playwright tests completed successfully!"

          # Clean up server
          echo "Stopping server..."
          kill $SERVER_PID || echo "Server already stopped"
        env:
          PLAYWRIGHT_BASE_URL: http://127.0.0.1:4173

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: layer-playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: layer-playwright-results
          path: test-results/
          retention-days: 30

  # Upload Coverage, Analyzer, Lighthouse as Artifacts
  upload-artifacts:
    name: Upload Artifacts
    runs-on: ubuntu-latest
    needs: [build, unit-tests, integration-tests, playwright]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Generate bundle analysis
        run: pnpm bundle-analyze

      - name: Generate comprehensive layer report
        run: |
          mkdir -p layer-reports
          
          # Create index.html for layer artifact browsing
          cat > layer-reports/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Forge Layer - Build Reports</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 40px; }
                  .container { max-width: 1200px; margin: 0 auto; }
                  .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
                  .card { border: 1px solid #e1e5e9; border-radius: 8px; padding: 20px; background: #fff; }
                  .card h3 { margin-top: 0; color: #24292e; }
                  .card a { color: #0366d6; text-decoration: none; }
                  .card a:hover { text-decoration: underline; }
                  .status { padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: 600; }
                  .status.success { background: #d4edda; color: #155724; }
                  .status.warning { background: #fff3cd; color: #856404; }
                  .status.error { background: #f8d7da; color: #721c24; }
                  .timestamp { color: #586069; font-size: 14px; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>Forge Layer - Build Reports</h1>
                  <p class="timestamp">Generated: $(date)</p>
                  
                  <div class="grid">
                      <div class="card">
                          <h3>📊 Bundle Analysis</h3>
                          <p>Detailed bundle size analysis and optimization recommendations.</p>
                          <a href="bundle-analysis.html" target="_blank">View Bundle Analysis</a>
                      </div>
                      
                      <div class="card">
                          <h3>🧪 Test Coverage</h3>
                          <p>Unit test coverage reports and metrics.</p>
                          <a href="coverage/index.html" target="_blank">View Coverage Report</a>
                      </div>
                      
                      <div class="card">
                          <h3>🎭 Playwright Tests</h3>
                          <p>End-to-end test results and screenshots.</p>
                          <a href="playwright-report/index.html" target="_blank">View E2E Report</a>
                      </div>
                      
                      <div class="card">
                          <h3>🔧 Integration Tests</h3>
                          <p>Integration test results and metrics.</p>
                          <a href="integration-results.html" target="_blank">View Integration Report</a>
                      </div>
                  </div>
              </div>
          </body>
          </html>
          EOF

          # Copy bundle analysis to reports
          if [ -f "dist/bundle-analysis.html" ]; then
              cp dist/bundle-analysis.html layer-reports/
          fi

          # Copy coverage reports
          if [ -d "artifacts/layer-unit-test-results/coverage" ]; then
              cp -r artifacts/layer-unit-test-results/coverage layer-reports/
          fi

          # Copy Playwright reports
          if [ -d "artifacts/layer-playwright-report" ]; then
              cp -r artifacts/layer-playwright-report layer-reports/
          fi

          # Copy integration test results
          if [ -d "artifacts/layer-integration-test-results" ]; then
              cp -r artifacts/layer-integration-test-results layer-reports/
          fi

      - name: Upload comprehensive layer reports
        uses: actions/upload-artifact@v4
        with:
          name: layer-build-reports-${{ github.run_number }}
          path: layer-reports/
          retention-days: 90

      - name: Deploy layer reports to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./layer-reports
          destination_dir: layer-reports/${{ github.run_number }}

  # Final status check job - reports as 'layer-ci' for branch protection
  layer-ci:
    name: Layer CI Status
    runs-on: ubuntu-latest
    needs: [build, unit-tests, integration-tests, playwright]
    if: always()
    steps:
      - name: Layer CI Status Check
        run: |
          if [[ "${{ needs.build.result }}" == "success" && 
                "${{ needs.unit-tests.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" && 
                "${{ needs.playwright.result }}" == "success" ]]; then
            echo "✅ All Layer CI checks passed"
            exit 0
          else
            echo "❌ One or more Layer CI checks failed:"
            echo "  build: ${{ needs.build.result }}"
            echo "  unit-tests: ${{ needs.unit-tests.result }}"
            echo "  integration-tests: ${{ needs.integration-tests.result }}"
            echo "  playwright: ${{ needs.playwright.result }}"
            exit 1
          fi