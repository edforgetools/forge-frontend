name: Artifact Publisher

on:
  workflow_run:
    workflows: ["Layer CI", "Frontend CI"]
    types: [completed]

jobs:
  publish-artifacts:
    name: Publish Build Artifacts
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.18.1'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Generate bundle analysis
        run: pnpm bundle-analyze

      - name: Generate comprehensive report
        run: |
          mkdir -p reports
          
          # Create index.html for artifact browsing
          cat > reports/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Forge Frontend - Build Reports</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 40px; }
                  .container { max-width: 1200px; margin: 0 auto; }
                  .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
                  .card { border: 1px solid #e1e5e9; border-radius: 8px; padding: 20px; background: #fff; }
                  .card h3 { margin-top: 0; color: #24292e; }
                  .card a { color: #0366d6; text-decoration: none; }
                  .card a:hover { text-decoration: underline; }
                  .status { padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: 600; }
                  .status.success { background: #d4edda; color: #155724; }
                  .status.warning { background: #fff3cd; color: #856404; }
                  .status.error { background: #f8d7da; color: #721c24; }
                  .timestamp { color: #586069; font-size: 14px; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>Forge Frontend - Build Reports</h1>
                  <p class="timestamp">Generated: $(date)</p>
                  
                  <div class="grid">
                      <div class="card">
                          <h3>üìä Bundle Analysis</h3>
                          <p>Detailed bundle size analysis and optimization recommendations.</p>
                          <a href="bundle-analysis.html" target="_blank">View Bundle Analysis</a>
                      </div>
                      
                      <div class="card">
                          <h3>üß™ Test Coverage</h3>
                          <p>Unit test coverage reports and metrics.</p>
                          <a href="coverage/index.html" target="_blank">View Coverage Report</a>
                      </div>
                      
                      <div class="card">
                          <h3>üé≠ Playwright Tests</h3>
                          <p>End-to-end test results and screenshots.</p>
                          <a href="playwright-report/index.html" target="_blank">View E2E Report</a>
                      </div>
                      
                      <div class="card">
                          <h3>‚ö° Lighthouse Performance</h3>
                          <p>Performance, accessibility, and SEO audit results.</p>
                          <a href="lighthouse-results.html" target="_blank">View Lighthouse Report</a>
                      </div>
                      
                      <div class="card">
                          <h3>üìè Size Limit Report</h3>
                          <p>Bundle size limits and regression analysis.</p>
                          <a href="size-limit-report.html" target="_blank">View Size Report</a>
                      </div>
                  </div>
              </div>
          </body>
          </html>
          EOF

          # Copy bundle analysis to reports
          if [ -f "dist/bundle-analysis.html" ]; then
              cp dist/bundle-analysis.html reports/
          fi

          # Copy coverage reports
          if [ -d "artifacts/vitest-results/coverage" ]; then
              cp -r artifacts/vitest-results/coverage reports/
          fi

          # Copy Playwright reports
          if [ -d "artifacts/playwright-report" ]; then
              cp -r artifacts/playwright-report reports/
          fi

          # Copy Lighthouse results
          if [ -f "artifacts/lighthouse-results/lighthouse-results.json" ]; then
              cp artifacts/lighthouse-results/lighthouse-results.json reports/
              # Convert JSON to HTML report
              node -e "
                const fs = require('fs');
                const data = JSON.parse(fs.readFileSync('artifacts/lighthouse-results/lighthouse-results.json', 'utf8'));
                const html = \`
                  <!DOCTYPE html>
                  <html>
                  <head><title>Lighthouse Results</title></head>
                  <body>
                    <h1>Lighthouse Results</h1>
                    <pre>\${JSON.stringify(data, null, 2)}</pre>
                  </body>
                  </html>
                \`;
                fs.writeFileSync('reports/lighthouse-results.html', html);
              "
          fi

          # Generate size limit report
          pnpm size-limit --json > reports/size-limit-results.json
          node -e "
            const fs = require('fs');
            const data = JSON.parse(fs.readFileSync('reports/size-limit-results.json', 'utf8'));
            const html = \`
              <!DOCTYPE html>
              <html>
              <head><title>Size Limit Report</title></head>
              <body>
                <h1>Size Limit Report</h1>
                <pre>\${JSON.stringify(data, null, 2)}</pre>
              </body>
              </html>
            \`;
            fs.writeFileSync('reports/size-limit-report.html', html);
          "

      - name: Upload comprehensive reports
        uses: actions/upload-artifact@v4
        with:
          name: build-reports-${{ github.run_number }}
          path: reports/
          retention-days: 90

      - name: Deploy reports to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./reports
          destination_dir: reports/${{ github.run_number }}

      - name: Comment PR with reports
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('üìä Build Reports')
            );
            
            const reportUrl = \`https://\${context.repo.owner}.github.io/\${context.repo.repo}/reports/\${context.run_number}\`;
            
            const commentBody = \`## üìä Build Reports
            
            Build completed successfully! View detailed reports:
            
            - [Bundle Analysis](\${reportUrl}/bundle-analysis.html)
            - [Test Coverage](\${reportUrl}/coverage/index.html)
            - [E2E Tests](\${reportUrl}/playwright-report/index.html)
            - [Lighthouse Performance](\${reportUrl}/lighthouse-results.html)
            - [Size Limits](\${reportUrl}/size-limit-report.html)
            
            [View All Reports](\${reportUrl}/)
            \`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody,
              });
            }
